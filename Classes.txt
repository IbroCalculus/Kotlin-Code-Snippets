CHECK ALSO:
 Companion Object.txt (Kotlin equivalent of Java's static keyword)
 Sealed Class  // Class that cannot be inherited
 Abstract Class
 Data Class

NB: Functions inside a class are known as member functions or methods

======== DECLARING A CLASS ==============

class Student{
    var fName = "Ibrahim"
    var sName = "Suleiman"

    fun fullName(){
        println("Your full name is: $fName $sName")
    }

    fun age(age: Int){
        println("Your full name is: ${fName + " " + sName} and your age is: $age")
    }
}

============ CREATING INSTANCE OF A CLASS ===============

fun main(args: Array<String>) {

    var student1 = Student()
    println("DETAILS: \nFirstName: ${student1.fName}, \nSurname: ${student1.sName}")
    student1.fullName()

    student1.fName = "Majeed"
    println("DETAILS: \nFirstName: ${student1.fName}, \nSurname: ${student1.sName}")
    student1.age(78)

}


=================== CONSTRUCTOR =========================
NB: Constructor overloading is also supported
NB: The constructor keyword can be omitted, unless...
NB: The constructor keyword is compulsory if an access modifier is used; 
     ie class TestClass2 private constructor()...
NB: Check on the initialization block below in order to execute a code immdiately a class's object is initialized


---------- Example 1 (Check also example 2 if this still seems confusing) -----------

//class TestClass2 constructor(var fName: String = "Ibrahim", var sName: String = "Musa") {
class TestClass2 constructor(var fName: String, var sName: String) { //This first one is the primary constructor

    //this.fName = fName
    //var age = 35
    //email : String = "sample@email.com"
    init {
        this.sName = sName
        var age: Int = 25
        var email: String
        print("Welcome $fName $sName, age $age")
    }

    fun sayHello(){
        print()}
   }
var testclass2 = TestClass2("Ibrahim", "Suleiman")


---------- Example 2 -----------
class Multiplier(var a: Int, var b:Int) {

    init {
        println("Values entered are: $a and $b")
    }

    fun mult(){
        println("The product of both numbers is: ${a * b}")
    }

    fun mult(a: Int, b: Int){
        println("The product = ${a*b}")
    }
}

------------------- OVERRIDING GETTERS AND SETTERS ------------------------------
Getters and setters are called implicitly, do be override, note that firstName: String does not contain var

class Employee(firstName: String) {

// 1. The default implicit getter and setter
    var firstName = firstName
        get() {
            return  field
        }

        set(value) {
            field = value
        }
}

    val emp1 = Employee("Ibrahim")
    println(emp1.firstName)   // output: Ibrahim
    emp1.firstName = "Musa"   // set firstName = Musa
    println(emp1.firstName)   // get output; Musa


// 2. Overriding the implicit getter and setter

    var firstName = firstName
        get() {
            return  " Welcome Mr $field"
        }

        set(value) {
            field = "Alhaji $value"
        }

    val emp1 = Employee("Ibrahim")
    println(emp1.firstName)   // output: Welcome Mr Ibrahim
    emp1.firstName = "Musa"   // set firstName = Alhaji Musa
    println(emp1.firstName)   // get output; Welcome Mr Ahaji Musa



---------- CONSTRUCTOR WITH DEFAULT VALUE ---------------
class User(var name:String = "John", var lastName:String = "Doe", var age: Int = 45) { ...

    val friend5 = User()	//OUTPUT: Details: Name: John, Last Name: Doe, age: 45


---------- CONSTRUCTOR OVERLOADING --------------

 2 Methods

------  Method 1 (No primary constructor, all are secondary constructor, still good) -------------

class MySecondCar {
    var name: String? = null
    var model: Int? = null

//    First constructor
    constructor()

//    Second constructor
    constructor(name: String?) {
        this.name = name
    }

//    Third constructor
    constructor(name: String?, model: Int?) {
        this.name = name
        this.model = model
    }
}

----- Method 2 (Using primary constructor) -------

NB: You may use an initialization block in the main/primary constructor to execute a code once the class's object is initialized.
    But in secondary constructors, you don't need the init block.
    The secondary construtor(s) only take in parameters, not variables, unlike the primary which can take either.


class User(var name:String, var lastName:String, var age: Int) {
    init {
        println("Details: Name: $name, Last Name: $lastName, age: $age")
    }

    //NB: While declaring a secondary constructor, must give default values to unused parameters in the primary constructor within the this()
    //NB: All secondary constructors call the init block by default when used

    constructor(name: String): this(name, "",0){
        println("This secondary constructor doesn't require the init block")
    }

    var id = 0
    constructor(name:String, lastName:String, age: Int, id: Int): this(name,lastName,age){
        this.id = id
    }

    constructor(age: Int): this("","",age){

    }

    constructor(id: Double): this("","",0){

    }

}

    val friend = User("John", "Smith", 30)	// OUTPUT-> Details: Name: John, Last Name: Smith, age: 30
    val friend2 = User("Alex")			// 	    Details: Name: Alex, Last Name: , age: 0
    val friend3 = User(45)			//	    Details: Name: , Last Name: , age: 45
    val friend4 = User(id = 45.6)		//	    Details: Name: , Last Name: , age: 0

============ INITIALIZER BLOCK =====================
- Initializer block is called after the primary constructor is invoked.
- There can be more than one init blocks, which will run sequentially.
- All init will execute before the contents of the constructor

class TestClass2 (var fName: String, var sName: String) {
    init {
        println("You just created a class and this is its initialization")
        println("Welcome Mr $fName $sName, This is a constructor + initialization")
    }

-- They can be multiple initializer blocks, which will all be called sequentially, from top first to bottom last


=============== ADDING A PREFIX TO A CLASS VARIABLE ===========
class User(var firstName: String, var lastName: String) {

    var fullName: String = "$firstName + $lastName"
        get() = "Your full name is: $field"
    
    var firstName1 = "$firstName"
        get() = "Your first name is: $field"
}

    var user = User("Ibrahim", "Suleiman")
    println(user.fullName)                    //OUTPUT: Your full name is: Ibrahim + Suleiman
    println(user.firstName1)                  //OUTPUT: Your first name is: Ibrahim


========== GETTERS AND SETTERS ==================
Getters and setters are auto generated in kotlin.
In kotlin, they are implicit, meaning we don't have to declare like in java.

 ---- To override getters and setters ---
class User(var firstName: String, ...

    var firstName = firstName
        get() {
            return field
         }
        set(value) {
           field = value
         }

==================== Generating toString =====================
class Employee(var firstName: String, var age: Int){
    override fun toString(): String {
        return "Employee(firstName='$firstName', age=$age)"
    }

============ INHERITANCE ===============
Use the 'open' keyword in front of the superclass/parent, to make this the class other classes should inherit properties and functions from.
To inherit from a class, specify the name of the subclass, followed by a colon :, and then the name of the superclass

NB: No need to include the 'open' keyword, IDE will suggest when to override

AdminStaff inherits from Staff

open class Staff {
    open var firstName = "Ibrahim"
    var surName = "Suleiman"

    open fun details(){
        println("FULLNAME: $firstName $surName\n")
    }
}

class AdminStaff: Staff() {
    var position = "Level 12 Officer"
    override var firstName = "Ibro"

    override fun details(){
        println("ADMIN DETAILS: FullName: $firstName $surName,  Position: $position\n")
    }
}

---------- Another reference example ----------------

open class Vehicle(val name: String, val color: String){
    fun move(){
        println("$name is moving")
    }

    fun stop(){
        println("$name stopped moving")
    }
}

class Car(name:String, color: String, val engine: Int, val doors: Int): Vehicle(name, color) {
}

class Plane(name: String, color: String, val engine: Int, val doors: Int): Vehicle(name, color){
}

    val car1 = Car("BMW", "RED", 1, 4)
    val plane1 = Plane("Boeing", "WHITE & BLUE", 4, 4)
    
    car1.move()


--------- Overriding methods from a parent class -----------

 1. Use the open keyword before the function in the parent class

open class Vehicle(val name: String, val color: String){
    open fun move(){
        println("$name is moving")
    }

 2. Within child class, Ctrl + O and override move()

class Car(name:String, color: String, val engine: Int, val doors: Int): Vehicle(name, color) {
    override fun move() {
        println("This is it")    // Or call another function instead
        super.move()  // means call the move function from the base/parent class. May delete if not needed
    }

======== COMPANION OBJECT (This is equivalent to Static in Java) =======
This allows the accessing of variables or methods within a class without having to create an instance of that class.
This is achieved by wrapping the method within a companion object as depicted below
any method within the companion object belongs to the class itself, hence not associated to an instance

---- E.g: ----

class Calculator(){
    companion object{
        var number = 234
        fun sum(a:Int, b:Int): Int{
            return a + b
        }
    }
}

 ----- Accessing the sum method ----
    val x = Calculator.sum(45,7)
    val num = Calculator.number
    println(x)
    println(number)
