
Lazy initialization is used when creating an instance/object is expensive.
Expensive in this context means that it will take some time.

The init block of the class instance that uses lazy initialization will not be called unless when the instance is used somewhere.
----

class User(var fName: String,  var lName: String, var age: Int){
    init {
        println("User $fName created")
    }
}

 --- Without lazy initialization ---
    val user1 = User("Alex", "Dobbin", 23)  // Will output by default, "User Alex created

 --- With lazy initialization (val keywordj) ---
    val user2 by lazy { 
        User("Khalid", "Hassan", 26)  // will NOT by default output, "User Alex created"
    }

    println(user2.fName)  // Now will output, first: "User Khalid created", then "Khalid"

    